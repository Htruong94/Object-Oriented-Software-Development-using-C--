//==============================================
// Name:           Hung Truong
// Student Number: 147779193
// Email:          htruong19@myseneca.ca
// Section:        NAA
// Date:           October 15, 2020
//==============================================
// OOP345 Workshop 5 Reflection
//==============================================

	In this workshop, I have learnt how to implement the lambda expressions which allows me to adjust values of a class by sending the class to a function which access one of the member functions of the class with parameters dependent on the parameters. This is shown in adjusting the prices of the book class dependent on their values of different member variables. On the other hand, I have learnt to use functors which instead sets a callback function to a void pointer which allows for member functions to call the callback function through the pointer every time it is called. This is useful as we get to control when the callback function can be called. Lambda expression is useful when adjusting values within the class while functors are useful by implementing templates in which the functor can take different functions dependent of the template while lambda expression is set into one function. 
	Another concept I have learnt through the workshop is the use of throw exceptions in which I throw exceptions when it happens to show any errors that may occur such as out of range exceptions. In the SpellChecker's constructor, I've implemented a const char* exception in which it throws the char* "Bad file name!" which sends it to the catch in which it prints the exception of that variable. If I were to change this code to achieve the same output without the exceptions, I would just use cout to print the "Exception: Bad file name!" which would achieve the same task. The difference between these two methods is that there could be more exceptions that can occur that are raised from different problems. With the throw catch method, we are able to throw more exception types into the catch instead of just couting the same thing constantly. This would also allow us to locate the errors in the code easier to allow for easier debugging.
	The Movie and Book have identical logic when loading the data from a file so to change it so that there would be less duplication of the logic, I would use a generic template function outside the two classes that splits the string into different variables. Then with the variables that are given with the string, I would push the values into the classes dependent on the variables given so that there is only one function that populates the data of each class instead of having 2 different functions of same logic populating its own class. 
	 Both the Movie and Book are created both created with the custom constructor yet they both have default constructor. It is not possible to remove these default constructors as the template class Collection is dependent on creating Movie and Book class objects. As such, they would require a default constructor is needed for Collection to exist so it is necessary for Movie and Books to have a default constructor even though they are not created in the main() function as they are created in the Collection class instead. 
	The main problem I have faced when working on this workshop is learning how to implement exceptions of different types. By learning how exceptions are created by the compiler, I was able to better understand the use of the type of exceptions and was able to throw the exceptions appropriately with their type. Another problem I have faced was the ability of storing the address of the callback function in a pointer but it was simple when looking more into it and was straight forward when learning the syntax of the callback function.
